# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import smart_environment_pb2 as smart__environment__pb2


class ArCondicionadoStub(object):
    """Serviço para o ArCondicionado
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ligar = channel.unary_unary(
                '/smart_environment.ArCondicionado/Ligar',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.Vazio.FromString,
                )
        self.Desligar = channel.unary_unary(
                '/smart_environment.ArCondicionado/Desligar',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.Vazio.FromString,
                )
        self.getStatus = channel.unary_unary(
                '/smart_environment.ArCondicionado/getStatus',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.StatusArCondicionado.FromString,
                )


class ArCondicionadoServicer(object):
    """Serviço para o ArCondicionado
    """

    def Ligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Desligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArCondicionadoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Ligar,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.Vazio.SerializeToString,
            ),
            'Desligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Desligar,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.Vazio.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.StatusArCondicionado.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_environment.ArCondicionado', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ArCondicionado(object):
    """Serviço para o ArCondicionado
    """

    @staticmethod
    def Ligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.ArCondicionado/Ligar',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.Vazio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Desligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.ArCondicionado/Desligar',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.Vazio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.ArCondicionado/getStatus',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.StatusArCondicionado.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SistemaControleIncendioStub(object):
    """Serviço para o SistemaControleIncendio
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ligar = channel.unary_unary(
                '/smart_environment.SistemaControleIncendio/Ligar',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.Vazio.FromString,
                )
        self.Desligar = channel.unary_unary(
                '/smart_environment.SistemaControleIncendio/Desligar',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.Vazio.FromString,
                )
        self.getStatus = channel.unary_unary(
                '/smart_environment.SistemaControleIncendio/getStatus',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.StatusSistemaControleIncendio.FromString,
                )


class SistemaControleIncendioServicer(object):
    """Serviço para o SistemaControleIncendio
    """

    def Ligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Desligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SistemaControleIncendioServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Ligar,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.Vazio.SerializeToString,
            ),
            'Desligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Desligar,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.Vazio.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.StatusSistemaControleIncendio.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_environment.SistemaControleIncendio', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SistemaControleIncendio(object):
    """Serviço para o SistemaControleIncendio
    """

    @staticmethod
    def Ligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.SistemaControleIncendio/Ligar',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.Vazio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Desligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.SistemaControleIncendio/Desligar',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.Vazio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.SistemaControleIncendio/getStatus',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.StatusSistemaControleIncendio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LampadaStub(object):
    """Serviço para a Lampada
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ligar = channel.unary_unary(
                '/smart_environment.Lampada/Ligar',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.Vazio.FromString,
                )
        self.Desligar = channel.unary_unary(
                '/smart_environment.Lampada/Desligar',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.Vazio.FromString,
                )
        self.getStatus = channel.unary_unary(
                '/smart_environment.Lampada/getStatus',
                request_serializer=smart__environment__pb2.Vazio.SerializeToString,
                response_deserializer=smart__environment__pb2.StatusLampada.FromString,
                )


class LampadaServicer(object):
    """Serviço para a Lampada
    """

    def Ligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Desligar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LampadaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Ligar,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.Vazio.SerializeToString,
            ),
            'Desligar': grpc.unary_unary_rpc_method_handler(
                    servicer.Desligar,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.Vazio.SerializeToString,
            ),
            'getStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.getStatus,
                    request_deserializer=smart__environment__pb2.Vazio.FromString,
                    response_serializer=smart__environment__pb2.StatusLampada.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'smart_environment.Lampada', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Lampada(object):
    """Serviço para a Lampada
    """

    @staticmethod
    def Ligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.Lampada/Ligar',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.Vazio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Desligar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.Lampada/Desligar',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.Vazio.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/smart_environment.Lampada/getStatus',
            smart__environment__pb2.Vazio.SerializeToString,
            smart__environment__pb2.StatusLampada.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
